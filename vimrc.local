" Enable searching in project with :find
set path=$PWD/**

" Turn off error indications (e.g. the bell sound)
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

map <Leader>f :e <C-R>=expand("%:p:h") . "/" <CR>
" Auto-indent in a way that makes sense
set autoindent

if executable('ag')
  let g:ctrlp_user_command = 'ag %s -l --nocolor --follow -g ""'
endif

" Reload the vimrc file
nmap <silent> <leader>v :so $MYVIMRC<CR>

" Scroll window to optimal spot for work (5 lines below top of screen)
nmap <silent> <leader>TT z<CR>15<C-y>

" Dodge a couple keystrokes on vim commands
nnoremap ; :
nnoremap <leader>f ;

" Put latest yanked text (bypass latest deleted text in default buffer)
noremap YP "0P
nnoremap <expr> Yp getline('.') =~? '\v^\s+$' ? "\"_dd\"0P=`]" : "\"0p=p`]"

" highlight search results
" set hlsearch

" Search settings
set ignorecase
set smartcase

" Line Numbers
set relativenumber

" Full line tab completion using Supertab
imap <C-l> <C-x><C-l>

" Paste from clipboard
map <leader>p :set paste<cr>:r !pbpaste<cr>:set nopaste<cr>
map <leader>bb :Gblame<CR>
" Faster saving
noremap <Leader>w :up<CR>
" Faster quit
noremap <Leader>q :up<CR>:q<CR>
" Faster search access
noremap <Leader>S :Ag<Space>
noremap <Leader>R :%s/
noremap <Leader>RV :%s/\%V
" Break out of insert mode and save
inoremap <Esc> <Esc><Esc>:up<CR>
" Navigate lines
map <leader>l $
map <leader>h ^
" Don't skip over second part of a broken line
nnoremap j gj
nnoremap k gk
" Adjust lines
map <leader>k kJ
map Di ddO
" Adds whitespace above or below with alt j/k
nnoremap <silent>Wj :set paste<CR>m`o<Esc>``:set nopaste<CR>
nnoremap <silent>Wk :set paste<CR>m`O<Esc>``:set nopaste<CR>
nnoremap <silent>WW :Ag <C-r><C-w><CR>
" Paste over lines with whitespace (common when using snipmate)
nnoremap <expr> p getline('.') =~? '\v^\s+$' ? "\"_ddP=`]" : "p=`]"

" Insert last ditch effort in integration tests
nnoremap sos osave_and_open_screenshot<ESC>
" Clear search matches
map <leader>c :nohlsearch<CR>
" RSpec.vim settings and mappings
let g:rspec_command = 'time spring rspec {spec}'
" let g:rspec_command = 'rspec {spec}'
" let g:rspec_command = 'zeus rspec {spec}'
map <Leader>s :call RunNearestSpec()<CR>
" map <Leader>ss :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>
" Enter Explore faster
map <Leader>e :Explore<CR>

"Ensure focused split is largest in window
set winwidth=84
set winheight=5
set winminheight=5
set winheight=999

"folding settings
set foldmethod=indent   "fold based on indent
set foldnestmax=10      "deepest fold is 10 levels
set nofoldenable        "dont fold by default
set foldlevel=1         "this is just what i use

" Don't add the comment prefix when I hit enter or o/O on a comment line.
set formatoptions-=or

runtime macros/matchit.vim

" Settings for vim-session
let g:session_autosave='no'
let g:session_autoload='no'
" Settings for syntastic
let g:syntastic_html_checkers=['']
let g:syntastic_mode_map = {
      \ "mode": "active",
      \ "passive_filetypes": ["haml", "scss", "sass"] }


" Settings for ctrlp
" let g:ctrlp_follow_symlinks = 3

" Navigate windows with auto-create if navigating at edge of windows
function! s:GotoNextWindow( direction )
  let l:prevWinNr = winnr()
  execute 'wincmd' a:direction
  return winnr() != l:prevWinNr
endfunction

function! s:JumpWithCreate( direction )
  if ! s:GotoNextWindow(a:direction)
    if a:direction == 'h'
      vsplit
    elseif a:direction == 'j'
      split
    elseif a:direction == 'k'
      split
    elseif a:direction == 'l'
      vsplit
    endif
    execute 'wincmd' a:direction
  endif
endfunction

au BufNewFile,BufRead *.raml set filetype=yaml
nnoremap <silent> <C-h> :<C-u>call <SID>JumpWithCreate('h')<CR>
nnoremap <silent> <C-j> :<C-u>call <SID>JumpWithCreate('j')<CR>
nnoremap <silent> <C-k> :<C-u>call <SID>JumpWithCreate('k')<CR>
nnoremap <silent> <C-l> :<C-u>call <SID>JumpWithCreate('l')<CR>

" Auto reloading
function! WatchForChanges(bufname, ...)
  " Figure out which options are in effect
  if a:bufname == '*'
    let id = 'WatchForChanges'.'AnyBuffer'
    " If you try to do checktime *, you'll get E93: More than one match for * is given
    let bufspec = ''
  else
    if bufnr(a:bufname) == -1
      echoerr "Buffer " . a:bufname . " doesn't exist"
      return
    end
    let id = 'WatchForChanges'.bufnr(a:bufname)
    let bufspec = a:bufname
  end
  if len(a:000) == 0
    let options = {}
  else
    if type(a:1) == type({})
      let options = a:1
    else
      echoerr "Argument must be a Dict"
    end
  end
  let autoread    = has_key(options, 'autoread')    ? options['autoread']    : 0
  let toggle      = has_key(options, 'toggle')      ? options['toggle']      : 0
  let disable     = has_key(options, 'disable')     ? options['disable']     : 0
  let more_events = has_key(options, 'more_events') ? options['more_events'] : 1
  let while_in_this_buffer_only = has_key(options, 'while_in_this_buffer_only') ? options['while_in_this_buffer_only'] : 0
  if while_in_this_buffer_only
    let event_bufspec = a:bufname
  else
    let event_bufspec = '*'
  end
  let reg_saved = @"
  "let autoread_saved = &autoread
  let msg = "\n"
  " Check to see if the autocommand already exists
  redir @"
    silent! exec 'au '.id
  redir END
  let l:defined = (@" !~ 'E216: No such group or event:')
  " If not yet defined...
  if !l:defined
    if l:autoread
      let msg = msg . 'Autoread enabled - '
      if a:bufname == '*'
        set autoread
      else
        setlocal autoread
      end
    end
    silent! exec 'augroup '.id
      if a:bufname != '*'
        "exec "au BufDelete    ".a:bufname . " :silent! au! ".id . " | silent! augroup! ".id
        "exec "au BufDelete    ".a:bufname . " :echomsg 'Removing autocommands for ".id."' | au! ".id . " | augroup! ".id
        exec "au BufDelete    ".a:bufname . " execute 'au! ".id."' | execute 'augroup! ".id."'"
      end
        exec "au BufEnter     ".event_bufspec . " :checktime ".bufspec
        exec "au CursorHold   ".event_bufspec . " :checktime ".bufspec
        exec "au CursorHoldI  ".event_bufspec . " :checktime ".bufspec
      " The following events might slow things down so we provide a way to disable them...
      " vim docs warn:
      "   Careful: Don't do anything that the user does
      "   not expect or that is slow.
      if more_events
        exec "au CursorMoved  ".event_bufspec . " :checktime ".bufspec
        exec "au CursorMovedI ".event_bufspec . " :checktime ".bufspec
      end
    augroup END
    let msg = msg . 'Now watching ' . bufspec . ' for external updates...'
  end
  " If they want to disable it, or it is defined and they want to toggle it,
  if l:disable || (l:toggle && l:defined)
    if l:autoread
      let msg = msg . 'Autoread disabled - '
      if a:bufname == '*'
        set noautoread
      else
        setlocal noautoread
      end
    end
    " Using an autogroup allows us to remove it easily with the following
    " command. If we do not use an autogroup, we cannot remove this
    " single :checktime command
    " augroup! checkforupdates
    silent! exec 'au! '.id
    silent! exec 'augroup! '.id
    let msg = msg . 'No longer watching ' . bufspec . ' for external updates.'
  elseif l:defined
    let msg = msg . 'Already watching ' . bufspec . ' for external updates'
  end
  echo msg
  let @"=reg_saved
endfunction

" let autoreadargs={'autoread':1}
" execute WatchForChanges("*",autoreadargs)
